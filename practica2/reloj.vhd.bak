library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reloj_timer is
    Port (
        reloj: in std_logic;
        habilitar: in std_logic;  -- Nueva se√±al para habilitar el conteo
        reset: in std_logic;
        L1: out std_logic_vector(6 downto 0); -- Unidades de segundo
        L2: out std_logic_vector(6 downto 0); -- Decenas de segundo
        L3: out std_logic_vector(6 downto 0)  -- Unidades de minuto
    );
end reloj_timer;

architecture Behavioral of reloj_timer is
    signal segundo: std_logic;
    signal n: std_logic;
    signal e: std_logic;
    signal Qs: std_logic_vector(3 downto 0);
    signal Qdm: std_logic_vector(3 downto 0);
    signal Qm: std_logic_vector(3 downto 0);
begin
    divisor: process (reloj)
        variable cuenta: unsigned(27 downto 0) := X"0000000";
    begin
        if rising_edge(reloj) then
            if habilitar = '1' then  -- Solo contar si habilitado
                if cuenta = X"48009E0" then
                    cuenta := X"0000000";
                else
                    cuenta := cuenta + 1; -- Usando unsigned para la suma
                end if;
                segundo <= cuenta(22);
            end if;
        end if;
    end process;

    unidades: process (segundo, reset)
        variable cuenta: unsigned(3 downto 0) := to_unsigned(9, 4);
    begin
        if reset = '1' then
            cuenta := to_unsigned(9, 4);
            n <= '0';
        elsif rising_edge(segundo) then
            if habilitar = '1' then  -- Solo contar si habilitado
                if cuenta = to_unsigned(0, 4) then
                    cuenta := to_unsigned(9, 4);
                    n <= '1';
                else
                    cuenta := cuenta - 1; -- Usando unsigned para la resta
                    n <= '0';
                end if;
            end if;
        end if;
        Qs <= std_logic_vector(cuenta); -- Convertir de nuevo a std_logic_vector si es necesario
    end process;

    decenas: process (n, reset)
        variable cuenta: unsigned(3 downto 0) := to_unsigned(5, 4);
    begin
        if reset = '1' then
            cuenta := to_unsigned(5, 4);
            e <= '0';
        elsif rising_edge(n) then
            if habilitar = '1' then  -- Solo contar si habilitado
                if cuenta = to_unsigned(0, 4) then
                    cuenta := to_unsigned(5, 4);
                    e <= '1';
                else
                    cuenta := cuenta - 1; -- Usando unsigned para la resta
                    e <= '0';
                end if;
            end if;
        end if;
        Qdm <= std_logic_vector(cuenta); -- Convertir de nuevo a std_logic_vector si es necesario
    end process;

    minutos: process (e, reset)
        variable cuenta: unsigned(3 downto 0) := to_unsigned(3, 4);
    begin
        if reset = '1' then
            cuenta := to_unsigned(3, 4); -- Se reinicia en 3:59
        elsif rising_edge(e) then
            if habilitar = '1' then  -- Solo contar si habilitado
                if cuenta = to_unsigned(0, 4) then
                    cuenta := to_unsigned(3, 4); -- Se reinicia en 3:59
                else
                    cuenta := cuenta - 1; -- Usando unsigned para la resta
                end if;
            end if;
        end if;
        Qm <= std_logic_vector(cuenta); -- Convertir de nuevo a std_logic_vector si es necesario
    end process;

    -- Decodificadores para los displays de 7 segmentos
    with Qs select
        L1 <= "1000000" when "0000", --0
              "1111001" when "0001", --1
              "0100100" when "0010", --2
              "0110000" when "0011", --3
              "0011001" when "0100", --4
              "0010010" when "0101", --5
              "0000010" when "0110", --6
              "1111000" when "0111", --7
              "0000000" when "1000", --8
              "0010000" when "1001", --9
              "1111111" when others; -- F

    with Qdm select
        L2 <= "1000000" when "0000", --0
              "1111001" when "0001", --1
              "0100100" when "0010", --2
              "0110000" when "0011", --3
              "0011001" when "0100", --4
              "0010010" when "0101", --5
              "1111111" when others; -- F

    with Qm select
        L3 <= "1000000" when "0000", --0
              "1111001" when "0001", --1
              "0100100" when "0010", --2
              "0110000" when "0011", --3
              "1111111" when others; -- F

end Behavioral;

