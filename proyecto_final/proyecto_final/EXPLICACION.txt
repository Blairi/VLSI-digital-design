Quiero que hagas lo siguiente:

El siguiente programa es para controlar un motor con puente h

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity puente_h is
    Port(
        sw1 : in std_logic;  -- Switch 1 para controlar la polaridad
        sw2 : in std_logic;  -- Switch 2 para controlar la polaridad
        in1 : out std_logic; -- Entrada 1 del puente H
        in2 : out std_logic  -- Entrada 2 del puente H
    );
end puente_h;

architecture Behavioral of puente_h is
begin
    process(sw1, sw2)
    begin
        -- Control del puente H
        if (sw1 = '1' and sw2 = '0') then
            -- Polaridad: dirección 1
            in1 <= '1';
            in2 <= '0';
        elsif (sw1 = '0' and sw2 = '1') then
            -- Polaridad: dirección 2
            in1 <= '0';
            in2 <= '1';
        else
            -- Ambos switches en la misma posición: motor apagado
            in1 <= '0';
            in2 <= '0';
        end if;
    end process;
end Behavioral;

El siguiente programa es para recepcion de informacion(este no se tiene que modificar nada):

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity RX is
    port(
        reloj : in STD_LOGIC;
        rst : in STD_LOGIC;
        RX_WIRE : in STD_LOGIC;
        dato_out : out STD_LOGIC_VECTOR(7 downto 0);
        dato_valid : out STD_LOGIC
    );
end entity;

architecture behavioral of RX is
    signal BUFF: STD_LOGIC_VECTOR(9 downto 0);
    signal Flag: STD_LOGIC := '0';
    signal PRE: INTEGER RANGE 0 TO 5208 := 0;
    signal INDICE: INTEGER RANGE 0 TO 9 := 0;
    signal PRE_val: INTEGER range 0 to 41600;
    signal baud: STD_LOGIC_VECTOR(2 downto 0);
begin
    RX_dato : process(reloj, rst)
    begin
        if rst = '1' then
            Flag <= '0';
            INDICE <= 0;
            PRE <= 0;
            dato_valid <= '0';
            dato_out <= (others => '0');
        elsif rising_edge(reloj) then
            dato_valid <= '0';  
            
            if (Flag = '0' and RX_WIRE = '0') then
                Flag <= '1';
                INDICE <= 0;
                PRE <= 0;
            end if;
            
            if (Flag = '1') then
                BUFF(INDICE) <= RX_WIRE;
                if(PRE < PRE_val) then
                    PRE <= PRE + 1;
                else
                    PRE <= 0;
                end if;
                
                if(PRE = PRE_val/2) then
                    if(INDICE < 9) then
                        INDICE <= INDICE + 1;
                    else
                        if(BUFF(0) = '0' and BUFF(9) = '1') then
                            dato_out <= BUFF(8 downto 1);
                            dato_valid <= '1';  
                        end if;
                        Flag <= '0';
                    end if;
                end if;
            end if;
        end if;
    end process RX_dato;

    baud <= "011";  -- 9600 bauds
    with (baud) select
        PRE_val <= 41600 when "000", -- 1200 bauds
                   20800 when "001", -- 2400 bauds
                   10400 when "010", -- 4800 bauds
                   5200 when "011",  -- 9600 bauds
                   2600 when "100",  -- 19200 bauds
                   1300 when "101",  -- 38400 bauds
                   866 when "110",   -- 57600 bauds
                   432 when others;  -- 115200 bauds
end architecture behavioral;

El siguiente programa, es para que un sensor ultrasonico, detecte una zona de "descarga" esta zona es cuando la distancia entre este y un obstaculo es mayor a 2 cm:

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY SensorDescarga IS
  PORT (
    clk : IN STD_LOGIC;
    eco : IN STD_LOGIC;
    dispa : OUT STD_LOGIC;
    descarga : OUT STD_LOGIC
  );
END SensorDescarga;

ARCHITECTURE Behavioral OF SensorDescarga IS
  SIGNAL cuenta : unsigned(16 DOWNTO 0) := (OTHERS => '0');
  SIGNAL centimetros : unsigned(15 DOWNTO 0) := (OTHERS => '0');
  SIGNAL espera : STD_LOGIC := '0';
  SIGNAL eco_pasado : STD_LOGIC := '0';
  SIGNAL eco_sinc : STD_LOGIC := '0';
  SIGNAL eco_nsinc : STD_LOGIC := '0';

BEGIN
  -- Proceso para manejar el trigger y la recepción del eco
  Trigger : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF espera = '0' THEN
        IF cuenta = 500 THEN
          dispa <= '0';
          espera <= '1';
          cuenta <= (OTHERS => '0');
        ELSE
          dispa <= '1';
          cuenta <= cuenta + 1;
        END IF;
      ELSIF eco_pasado = '0' AND eco_sinc = '1' THEN
        cuenta <= (OTHERS => '0');
        centimetros <= (OTHERS => '0');
      ELSIF eco_pasado = '1' AND eco_sinc = '0' THEN
        -- Calcular distancia en cm
        centimetros <= cuenta / 58; -- Conversión del tiempo del eco a distancia
        cuenta <= (OTHERS => '0');
        espera <= '0';
      ELSE
        cuenta <= cuenta + 1;
      END IF;

      -- Actualizar señales de sincronización del eco
      eco_pasado <= eco_sinc;
      eco_sinc <= eco_nsinc;
      eco_nsinc <= eco;
    END IF;
  END PROCESS;

  -- Proceso para activar la señal "descarga" si la distancia es mayor a 2 cm
  ActivarDescarga : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF centimetros > 2 THEN
        descarga <= '1'; -- Activar descarga
      ELSE
        descarga <= '0'; -- Desactivar descarga
      END IF;
    END IF;
  END PROCESS;

END Behavioral;

El siguiente programa es para detectar si hay algun obstaculo con otro sensor ultrasonico (es obstaculo si la distancia es menor a 13 cm)

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY SensorObstaculo IS
  PORT (
    clk : IN STD_LOGIC;
    eco : IN STD_LOGIC;
    dispa : OUT STD_LOGIC;
    obstaculo : OUT STD_LOGIC
  );
END SensorObstaculo;

ARCHITECTURE Behavioral OF SensorObstaculo IS
  SIGNAL cuenta : unsigned(16 DOWNTO 0) := (OTHERS => '0');
  SIGNAL centimetros : unsigned(15 DOWNTO 0) := (OTHERS => '0');
  SIGNAL espera : STD_LOGIC := '0';
  SIGNAL eco_pasado : STD_LOGIC := '0';
  SIGNAL eco_sinc : STD_LOGIC := '0';
  SIGNAL eco_nsinc : STD_LOGIC := '0';

BEGIN
  -- Proceso para manejar el trigger y la recepción del eco
  Trigger : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF espera = '0' THEN
        IF cuenta = 500 THEN
          dispa <= '0';
          espera <= '1';
          cuenta <= (OTHERS => '0');
        ELSE
          dispa <= '1';
          cuenta <= cuenta + 1;
        END IF;
      ELSIF eco_pasado = '0' AND eco_sinc = '1' THEN
        cuenta <= (OTHERS => '0');
        centimetros <= (OTHERS => '0');
      ELSIF eco_pasado = '1' AND eco_sinc = '0' THEN
        -- Calcular distancia en cm
        centimetros <= cuenta / 58; -- Conversión del tiempo del eco a distancia
        cuenta <= (OTHERS => '0');
        espera <= '0';
      ELSE
        cuenta <= cuenta + 1;
      END IF;

      -- Actualizar señales de sincronización del eco
      eco_pasado <= eco_sinc;
      eco_sinc <= eco_nsinc;
      eco_nsinc <= eco;
    END IF;
  END PROCESS;

  -- Proceso para activar la señal "obstaculo" si la distancia es menor a 13 cm
  DetectarObstaculo : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF centimetros < 13 THEN
        obstaculo <= '1'; -- Activar obstaculo
      ELSE
        obstaculo <= '0'; -- Desactivar obstaculo
      END IF;
    END IF;
  END PROCESS;

END Behavioral;


EL SIGUiente programa controla un servomotor y hace un giro de 180 grados en 5 movimientos

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity servomotor is     
Port ( reloj_sv : in  STD_LOGIC;            
	Pini : in  STD_LOGIC;
	Pfin : in  STD_LOGIC;            
	Inc : in  STD_LOGIC;
	Dec : in  STD_LOGIC;            
	control : out  STD_LOGIC;
	display1 : out STD_LOGIC_VECTOR(6 downto 0); -- Display para las decenas
	display2 : out STD_LOGIC_VECTOR(6 downto 0); -- Display para las unidades
	display3 : out STD_LOGIC_VECTOR(6 downto 0)  -- Display para las centenas 
	); 
end Servomotor;

architecture Behavioral of Servomotor is

-- Declaración del componente divisor
component divisor is
Port ( reloj : in std_logic;
	div_reloj : out std_logic);    
end component;

-- Declaración del componente PWM
component PWM is       
Port ( reloj_pwm : in  STD_LOGIC;                  
	D : in  STD_LOGIC_VECTOR (7 downto 0);                 
	S : out  STD_LOGIC);    
end component;

-- Declaración del componente decodificador de 7 segmentos
component decodificador_7segmentos is
    Port (
        numero : in  STD_LOGIC_VECTOR (3 downto 0); -- Número a decodificar
        segmentos : out  STD_LOGIC_VECTOR (6 downto 0)  -- Segmentos del display
    );
end component;

signal reloj_serv : STD_LOGIC;    
signal ancho : STD_LOGIC_VECTOR (7 downto 0) := X"0F"; 
signal posicion : integer range 0 to 180 := 0; -- Posición del servomotor en grados
signal centenas, decenas, unidades : STD_LOGIC_VECTOR (3 downto 0); -- Valores para los displays
	
begin    
	U1: divisor port map (reloj_sv, reloj_serv);   
	U2: PWM port map (reloj_serv, ancho, control);    

   
    U3: decodificador_7segmentos port map (centenas, display1);
    U4: decodificador_7segmentos port map (decenas, display2);
    U5: decodificador_7segmentos port map (unidades, display3);
	
process (reloj_serv, Pini, Pfin, Inc, Dec)      
    variable valor : STD_LOGIC_VECTOR (7 downto 0) := X"0F";      
    variable cuenta : integer range 0 to 1023 := 0;    
begin       
    if reloj_serv='1' and reloj_serv'event then          
        if cuenta>0 then             
            cuenta := cuenta -1;          
        else             
            if Pini='1' then                
                valor := X"07"; 
                posicion <= 0;  
            elsif Pfin='1' then                
                valor := X"1F"; 
                posicion <= 180; 
            elsif Inc='0' and valor<X"1F" then                
                valor := valor + 4; -- Incrementar 4 ciclos por posición
                posicion <= posicion + 30; 
            elsif Dec='0' and valor>X"07" then                
                valor := valor - 4; -- Decrementar 4 ciclos por posición
                posicion <= posicion - 30; 
            end if;             
            cuenta := 1023;             
            ancho <= valor;         
        end if;       
    end if;    
end process;


process(posicion)
begin
    centenas <= conv_std_logic_vector(posicion / 100, 4); -- Centenas
    decenas <= conv_std_logic_vector((posicion / 10) mod 10, 4); -- Decenas
    unidades <= conv_std_logic_vector(posicion mod 10, 4); -- Unidades
end process;

end Behavioral;

El siguiente programa es el divisor usado por el servomotor(NO SE MODIFICA):

Library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity divisor is
 Port (reloj: in std_logic;
 div_reloj: out std_logic);
end divisor;
architecture behavioral of divisor is
begin
 process (reloj)
 constant N: integer:= 11;
 variable cuenta: std_logic_vector (27 downto 0):= X"0000000";
 begin
 if rising_edge (reloj) then
 cuenta:= cuenta + 1;
 end if;
 div_reloj <= cuenta (N);
 end process;
end Behavioral;
-- Periodo de la señal de salida en funcion del valor N para reloj=50 MHz:
-- 27 ~ 5.37s, 26 ~ 2.68s, 25 ~ 1.34s, 24 ~ 671ms, 23 ~ 336 ms
-- 22 ~ 168 ms, 21 ~ 83.9 ms, 20 ~ 41.9 ms, 19 ~ 21 ms, 18 ~ 10.5 ms
-- 17 ~ 5.24 ms, 16 ~ 2.62 ms, 15 ~ 1.31 ms, 14 ~ 655 us, 13 ~ 328 us
-- 12 ~ 164 us, 11 ~ 81.9 us, 10 ~ 41 us, 9 ~ 20.5 us, 8 ~ 10.2 us

El siguiente programa es el PWM usado por el divisor(NO SE MODIFICA):

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity PWM is
 Port ( reloj_pwm : in STD_LOGIC;
 D : in STD_LOGIC_VECTOR (7 downto 0);
 S : out STD_LOGIC);
end PWM;
architecture Behavioral of PWM is
begin
 process (reloj_pwm) 
 variable cuenta : integer range 0 to 255 := 0;
 begin
 if reloj_pwm ='1' and reloj_pwm 'event then
 cuenta := (cuenta + 1) mod 256;
 if cuenta < D then
 S <= '1';
 else
 S <= '0';
 end if;
 end if;
 end process;
end behavioral;


El siguiente programa es un ejemplo de una unidad de control (tienes que modificar este programa)

 library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity UnidadControlUno is
    port(
        reloj : in STD_LOGIC;
        rst : in STD_LOGIC;
        RX_WIRE : in STD_LOGIC;
        MOT : out STD_LOGIC_VECTOR(3 downto 0);
        ledR : out STD_LOGIC;
        ledG : out STD_LOGIC;
        ledB : out STD_LOGIC;
        display1, display2, display3, display4, display5, display6: out STD_LOGIC_VECTOR(6 downto 0)
    );
end UnidadControlUno;

architecture behavioral of UnidadControlUno is
	 
    constant EnableMotor : STD_LOGIC_VECTOR(7 downto 0) := x"31"; --(Enciende el modulo 1: Motor a pasos)
    constant MotorUD : STD_LOGIC_VECTOR(7 downto 0) := x"32";   -- (Cambio de direccion del motor a pasos)
	 constant MotorStop : STD_LOGIC_VECTOR(7 downto 0) := x"33";   -- ' (cambio de sentido del motor a pasos)
	 constant EnableRGB : STD_LOGIC_VECTOR(7 downto 0) := x"34";   --  (Enciende el modulo 2: Secuencia de led RGB)
    constant MensajeLetrero : STD_LOGIC_VECTOR(7 downto 0) := x"35";   --  (Enciende el modulo 3: Letrero con corrimiento)
   
	
	 
    
 
    
    component RX is
        port(
            reloj : in STD_LOGIC;
            rst : in STD_LOGIC;
            RX_WIRE : in STD_LOGIC;
            dato_out : out STD_LOGIC_VECTOR(7 downto 0);
            dato_valid : out STD_LOGIC
        );
    end component;
    
  
    
   
    
    signal dato_out : STD_LOGIC_VECTOR(7 downto 0);
    signal dato_valid : STD_LOGIC;
    signal motorDireccion : STD_LOGIC;
	 signal parar : STD_LOGIC;
    signal MotorActivo : STD_LOGIC;
    signal LedActivo: STD_LOGIC;
    signal LetreroActivo : STD_LOGIC;

begin
    U_RX: RX
        port map (
            reloj => reloj,
            rst => rst,
            RX_WIRE => RX_WIRE,
            dato_out => dato_out,
            dato_valid => dato_valid
        );



 

 

    -- Proceso de control del motor, LED RGB y letrero
process(reloj, rst)
begin
    if rst = '1' then
        -- Al inicio, activar un módulo por defecto (el motor)
        motorDireccion <= '0';
        MotorActivo <= '1';   -- El motor está activado por defecto
        LedActivo<= '0';     -- LED RGB está apagado
        LetreroActivo <= '0'; -- Letrero está apagado
    elsif rising_edge(reloj) then
        if dato_valid = '1' then
            case dato_out is
                when EnableMotor =>
                    -- Apagar otros módulos antes de activar el motor
                    MotorActivo <= '1';
                    LedActivo<= '0';
                    LetreroActivo <= '0';
                    
                when MotorUD =>
                    -- Cambiar dirección del motor, pero no activar otros módulos
                    motorDireccion <= not motorDireccion;
						  
					 when MotorStop =>
                    -- Cambiar dirección del motor, pero no activar otros módulos
                    MotorActivo <= '0';
                    
                when EnableRGB =>
                    -- Apagar otros módulos antes de activar el LED RGB
                    MotorActivo <= '0';
                    LedActivo<= '1';
                    LetreroActivo <= '0';
                    
                when MensajeLetrero =>
                    -- Apagar otros módulos antes de activar el letrero
                    MotorActivo <= '0';
                    LedActivo<= '0';
                    LetreroActivo <= '1';
                    
                when others =>
                    -- Si no se recibe un comando válido, mantener el estado actual
                    null;
            end case;
       
        end if;
    end if;
end process;


end behavioral;

Quiero que la unidad haga lo siguiente:

1. Crear 3 motores (delantero mas, delantero menos, trasero)
2. Crear 1 sensor ultrasonicoDescarga 
3. Crear 2 sensor ultrasonicoObstaculo
4. Crear un servomotor

La unidad de control debe hacer lo siguiente:

Señales constantes:

constant avanzar : STD_LOGIC_VECTOR(7 downto 0) := x"31"; 
constant retroceder : STD_LOGIC_VECTOR(7 downto 0) := x"32";   
  

cuando dato_out = avanzar

Los 3 motores (delantero mas, delantero menos, trasero) deben tener sus respectivos sw1,sw2 con valor sw1 = 1 y sw2 = 0, ademas, ledG se activara
Siempre y cuando ninguno de los sensores Obstaculo (son 2) detecte un obstaculo (obstaculo = 1) o que la zona de descarga no sea (descarga = 1)

Si en cualquier momento, no importar el valor de dato_out,la señal obstaculo de cualquiera de los 2 sensoresObstaculo se activa, no se podra seguir avanzando

cuando dato_out = retroceder

Los 3 motores (delantero mas, delantero menos, trasero) deben tener sus respectivos sw1,sw2 con valor sw1 = 0 y sw2 = 1, ademas, ledR se activara
Siempre y cuando ninguno de los sensores Obstaculo (son 2) detecte un obstaculo (obstaculo = 1) o que la zona de descarga no sea (descarga = 1)

Si en cualquier momento, no importar el valor de dato_out,la señal obstaculo de cualquiera de los 2 sensoresObstaculo se activa, no se podra seguir retrocediendo

En el momento que la zona de descarga se active, es decir (descarga = 1),no importa el valor de dato_out, no se podra avanzar ni retroceder y el servomotor girara 180 grados, la señal LedB se activara.







